// This is a utility script which takes exported isobars from calculate_isobar.cpp
// and duplicates the set of 3 F isobars (for both Î”I = 1/2 and 3/2) 
// without needing to solve a redundant system of KT equations 
//
// We take in the order:    F0, F1, F2, G1, H1, H2
// out output in the order: M0, M1, M2, G1, N0, N1, N2, H1, H2
// Where the M's and N's are duplicates of each other given by the F's
//
// ------------------------------------------------------------------------------
// Author:       Daniel Winney (2025)
// Affiliation:  Universitat Bonn
//               Helmholtz Institute (HISKP)
// Email:        daniel.winney@gmail.com
// ------------------------------------------------------------------------------

#include "utilities.hpp"
#include "data_set.hpp"

void duplicate_isobars()
{
    using namespace iterateKT;
    
    // Locate files generated by calculate_isobars.cpp
    std::string path = "scripts/kaon/basis_functions/";
    std::string old_prefix = "basis_";
    // We have 15 columns per file because 
    // 7 isobars * 2 for real and imag parts
    // and + 1 for the s values
    auto F0 = import_data<15>(path+old_prefix+"F0.dat");
    auto F1 = import_data<15>(path+old_prefix+"F1.dat");
    auto F2 = import_data<15>(path+old_prefix+"F2.dat");
    auto G1 = import_data<15>(path+old_prefix+"G1.dat");
    auto H1 = import_data<15>(path+old_prefix+"H1.dat");
    auto H2 = import_data<15>(path+old_prefix+"H2.dat");

    // set of zeros to insert when necessary
    auto zeros = std::vector(F0[0].size(), 0.0);

    // We'll duplicate the previous files into files with new prefix
    std::string new_prefix = "K_3pi_";

    auto insert_zeros = [&](auto & in_data, std::string out_file, bool new_file = false)
    {
        // We insert 8 new columns
        // so files will have 15+8 = 23 columns
        std::array<std::vector<double>,23> out_data;
        // always copy the first column (s valuses)
        out_data[0] = in_data[0];
        // Copy next 10 columns (M's and G)
        for (int i = 1; i <= 10;  i++) out_data[i] = (!new_file) ? in_data[i] : zeros;
        // Insert 8 new columns (N's)
        for (int i = 11; i <= 18; i++) out_data[i] = (!new_file) ? zeros : in_data[i-10];      
        // Copy rest (H's)
        for (int i = 19; i <= 22; i++) out_data[i] = (!new_file) ? in_data[i-8] :  zeros; 
        print_to_file<23>(main_dir()+"/"+out_file, out_data);
    };
        
    bool old_file = false, new_file = true;
    insert_zeros(F0, path+new_prefix+"M0.dat", old_file);
    insert_zeros(F1, path+new_prefix+"M1.dat", old_file);
    insert_zeros(F2, path+new_prefix+"M2.dat", old_file);
    insert_zeros(G1, path+new_prefix+"G1.dat", old_file);
    insert_zeros(F0, path+new_prefix+"N0.dat", new_file);
    insert_zeros(F1, path+new_prefix+"N1.dat", new_file);
    insert_zeros(F2, path+new_prefix+"N2.dat", new_file);
    insert_zeros(H1, path+new_prefix+"H1.dat", old_file);
    insert_zeros(H2, path+new_prefix+"H2.dat", old_file);
};
